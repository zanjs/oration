var searchIndex = {};
searchIndex["oration"] = {"doc":"Oration: a Rocket/Elm self hosted commenting system for static sites.","items":[[3,"FormInput","oration","Incoming data from the web based form for a new comment.",null,null],[12,"comment","","Comment from textarea.",0,null],[12,"name","","Optional name.",0,null],[12,"email","","Optional email.",0,null],[12,"url","","Optional website.",0,null],[12,"title","","Title of post.",0,null],[12,"path","","Path of post.",0,null],[3,"Post","","Used in conjuction with `/count?`.",null,null],[12,"url","","Gets the url for the request.",1,null],[5,"rocket_route_fn_index","","",null,{"inputs":[{"name":"request"},{"name":"data"}],"output":{"name":"outcome"}}],[5,"index","","Serve up the index file, which ultimately launches the Elm app.",null,{"inputs":[],"output":{"name":"result"}}],[5,"rocket_route_fn_new_comment","","",null,{"inputs":[{"name":"request"},{"name":"data"}],"output":{"name":"outcome"}}],[5,"new_comment","","Process comment input from form.",null,{"inputs":[{"name":"result"}],"output":{"name":"string"}}],[5,"rocket_route_fn_get_session","","",null,{"inputs":[{"name":"request"},{"name":"data"}],"output":{"name":"outcome"}}],[5,"get_session","","Test function that returns the session hash from the database.",null,{"inputs":[{"name":"conn"}],"output":{"name":"string"}}],[5,"rocket_route_fn_get_comment_count","","",null,{"inputs":[{"name":"request"},{"name":"data"}],"output":{"name":"outcome"}}],[5,"get_comment_count","","Returns the comment count for a given post from the database.",null,{"inputs":[{"name":"conn"},{"name":"post"}],"output":{"name":"string"}}],[5,"rocket","","Ignite Rocket, connect to the database and start serving data. Exposes a connection to the database so we can set the session on startup.",null,null],[5,"main","","Application entry point.",null,{"inputs":[],"output":null}],[0,"config","","Loads configuration data from disk.",null,null],[3,"Config","oration::config","",null,null],[12,"host","","Top level location of the blog we are serving.",2,null],[17,"_IMPL_SERIALIZE_FOR_Config","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_Config","","",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"load","","Reads and parses data from the `oration.yaml` file and command line arguments.",2,{"inputs":[],"output":{"name":"result"}}],[11,"parse","","Additional checks to the configuration file that cannot be done implicitly by the type checker.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"db","oration","Handles the database connection pool.",null,null],[3,"Conn","oration::db","Connection request guard type: a wrapper around an r2d2 pooled connection.",null,null],[12,"0","","",3,null],[5,"init_pool","","Initializes a database pool.",null,{"inputs":[],"output":{"name":"pool"}}],[6,"Pool","","An alias to the type for a pool of Diesel `SQLite` connections.",null,null],[11,"deref","","",3,null],[11,"from_request","","",3,{"inputs":[{"name":"request"}],"output":{"name":"outcome"}}],[0,"models","oration","SQL <----> Rust inerop using Diesel.",null,null],[0,"preferences","oration::models","Preferences table.",null,null],[3,"Preference","oration::models::preferences","Queryable, Identifiable reference to the preferences table.",null,null],[12,"key","","Key",4,null],[12,"value","","Value",4,null],[5,"session_hash","","Generates a random hash used as a session ID.",null,{"inputs":[],"output":{"name":"result"}}],[17,"_IMPL_QUERYABLE_FOR_PREFERENCE","","",null,null],[11,"table","","",4,null],[11,"set_session","","Updates the sesssion key into the database only if the key does not exist. A default value is set in the migration schema and no other functions operate on this entry, so that should cover all bases.",4,{"inputs":[{"name":"sqliteconnection"}],"output":{"name":"result"}}],[11,"get_session","","Returns the current session value from the database.",4,{"inputs":[{"name":"sqliteconnection"}],"output":{"name":"result"}}],[0,"threads","oration::models","Threads table.",null,null],[3,"Thread","oration::models::threads","Queryable reference to the threads table.",null,null],[12,"id","","Primary key",5,null],[12,"uri","","URI to the thread",5,null],[12,"title","","Thread title",5,null],[3,"NewThread","","Insertable reference to the threads table.",null,null],[12,"uri","","URI to the thread.",6,null],[12,"title","","Thread title.",6,null],[17,"_IMPL_SERIALIZE_FOR_Thread","","",null,null],[17,"_IMPL_QUERYABLE_FOR_THREAD","","",null,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_thread","","Returns the id and title of a thread from the database for a given URI.",5,{"inputs":[{"name":"sqliteconnection"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_thread_id","","Returns the id of a thread from the database for a given URI.",5,{"inputs":[{"name":"sqliteconnection"},{"name":"str"}],"output":{"name":"result"}}],[11,"contains_thread","","Returns true if the requested URI is in the database.",5,{"inputs":[{"name":"sqliteconnection"},{"name":"str"}],"output":{"name":"result"}}],[11,"create_thread","","Saves a new thread for URI into the database.",5,{"inputs":[{"name":"sqliteconnection"},{"name":"str"},{"name":"option"}],"output":{"name":"result"}}],[0,"comments","oration::models","Comments table.",null,null],[3,"Comment","oration::models::comments","Queryable reference to the comments table.",null,null],[12,"id","","Primary key.",7,null],[12,"tid","","Reference to Thread.",7,null],[12,"parent","","Parent comment.",7,null],[12,"created","","Timestamp of creation.",7,null],[12,"modified","","Date modified it that's happened.",7,null],[12,"mode","","If the comment is live or under review.",7,null],[12,"remote_addr","","Remote IP.",7,null],[12,"text","","Actual comment.",7,null],[12,"author","","Commentors author if given.",7,null],[12,"email","","Commentors email address if given.",7,null],[12,"website","","Commentors website if given.",7,null],[12,"likes","","Number of likes a comment has recieved.",7,null],[12,"dislikes","","Number of dislikes a comment has recieved.",7,null],[12,"voters","","Who are the voters on this comment.",7,null],[17,"_IMPL_SERIALIZE_FOR_Comment","","",null,null],[17,"_IMPL_QUERYABLE_FOR_COMMENT","","",null,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"count","","Returns the number of comments for a given post denoted via the `path` variable.",7,{"inputs":[{"name":"sqliteconnection"},{"name":"str"}],"output":{"name":"result"}}],[0,"schema","oration","Verbose schema for the comment database.",null,null],[0,"comments","oration::schema","",null,null],[3,"table","oration::schema::comments","The actual table struct",null,null],[0,"dsl","","Re-exports all of the columns of this table, as well as the table struct renamed to the module name. This is meant to be glob imported for functions which only deal with one table.",null,null],[0,"columns","","Contains all of the columns of this table",null,null],[3,"star","oration::schema::comments::columns","Represents `table_name.*`, which is sometimes needed for efficient count queries. It cannot be used in place of `all_columns`, and has a `SqlType` of `()` to prevent it being used that way",null,null],[3,"id","","",null,null],[3,"tid","","",null,null],[3,"parent","","",null,null],[3,"created","","",null,null],[3,"modified","","",null,null],[3,"mode","","",null,null],[3,"remote_addr","","",null,null],[3,"text","","",null,null],[3,"author","","",null,null],[3,"email","","",null,null],[3,"website","","",null,null],[3,"likes","","",null,null],[3,"dislikes","","",null,null],[3,"voters","","",null,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"walk_ast","","",8,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"walk_ast","","",9,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",9,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",9,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",9,null],[11,"add","","",9,null],[11,"sub","","",9,null],[11,"div","","",9,null],[11,"mul","","",9,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"tid"}}],[11,"walk_ast","","",10,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",10,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",10,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",10,null],[11,"add","","",10,null],[11,"sub","","",10,null],[11,"div","","",10,null],[11,"mul","","",10,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"parent"}}],[11,"walk_ast","","",11,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",11,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",11,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",11,null],[11,"add","","",11,null],[11,"sub","","",11,null],[11,"div","","",11,null],[11,"mul","","",11,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"created"}}],[11,"walk_ast","","",12,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",12,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",12,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",12,null],[11,"add","","",12,null],[11,"sub","","",12,null],[11,"div","","",12,null],[11,"mul","","",12,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"modified"}}],[11,"walk_ast","","",13,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",13,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",13,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",13,null],[11,"add","","",13,null],[11,"sub","","",13,null],[11,"div","","",13,null],[11,"mul","","",13,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"walk_ast","","",14,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",14,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",14,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",14,null],[11,"add","","",14,null],[11,"sub","","",14,null],[11,"div","","",14,null],[11,"mul","","",14,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"remote_addr"}}],[11,"walk_ast","","",15,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",15,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",15,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",15,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"text"}}],[11,"walk_ast","","",16,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",16,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",16,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",16,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"author"}}],[11,"walk_ast","","",17,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",17,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",17,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",17,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"email"}}],[11,"walk_ast","","",18,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",18,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",18,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",18,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"website"}}],[11,"walk_ast","","",19,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",19,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",19,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",19,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"likes"}}],[11,"walk_ast","","",20,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",20,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",20,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",20,null],[11,"add","","",20,null],[11,"sub","","",20,null],[11,"div","","",20,null],[11,"mul","","",20,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"dislikes"}}],[11,"walk_ast","","",21,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",21,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",21,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",21,null],[11,"add","","",21,null],[11,"sub","","",21,null],[11,"div","","",21,null],[11,"mul","","",21,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"voters"}}],[11,"walk_ast","","",22,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",22,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",22,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",22,null],[6,"SqlType","oration::schema::comments","The SQL type of all of the columns on this table",null,null],[6,"BoxedQuery","","Helper type for representing a boxed query from this table",null,null],[17,"all_columns","","A tuple of all of the columns on this table",null,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"table"}}],[11,"star","","Represents `table_name.*`, which is sometimes necessary for efficient count queries. It cannot be used in place of `all_columns`",23,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"from_clause","","",23,null],[11,"default_selection","","",23,null],[11,"as_query","","",23,null],[11,"primary_key","","",23,null],[11,"all_columns","","",23,null],[11,"table","","",23,null],[11,"into_update_target","","",23,{"inputs":[{"name":"self"}],"output":{"name":"updatetarget"}}],[11,"join_target","","",23,null],[11,"join_target","","",23,null],[11,"join_target","","",23,null],[11,"join_target","","",23,null],[11,"has_static_query_id","","",23,{"inputs":[],"output":{"name":"bool"}}],[0,"preferences","oration::schema","",null,null],[3,"table","oration::schema::preferences","The actual table struct",null,null],[0,"dsl","","Re-exports all of the columns of this table, as well as the table struct renamed to the module name. This is meant to be glob imported for functions which only deal with one table.",null,null],[0,"columns","","Contains all of the columns of this table",null,null],[3,"star","oration::schema::preferences::columns","Represents `table_name.*`, which is sometimes needed for efficient count queries. It cannot be used in place of `all_columns`, and has a `SqlType` of `()` to prevent it being used that way",null,null],[3,"key","","",null,null],[3,"value","","",null,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"walk_ast","","",24,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"key"}}],[11,"walk_ast","","",25,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",25,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",25,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",25,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"walk_ast","","",26,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",26,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",26,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",26,null],[6,"SqlType","oration::schema::preferences","The SQL type of all of the columns on this table",null,null],[6,"BoxedQuery","","Helper type for representing a boxed query from this table",null,null],[17,"all_columns","","A tuple of all of the columns on this table",null,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"table"}}],[11,"star","","Represents `table_name.*`, which is sometimes necessary for efficient count queries. It cannot be used in place of `all_columns`",27,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"from_clause","","",27,null],[11,"default_selection","","",27,null],[11,"as_query","","",27,null],[11,"primary_key","","",27,null],[11,"all_columns","","",27,null],[11,"table","","",27,null],[11,"into_update_target","","",27,{"inputs":[{"name":"self"}],"output":{"name":"updatetarget"}}],[11,"join_target","","",27,null],[11,"join_target","","",27,null],[11,"join_target","","",27,null],[11,"join_target","","",27,null],[11,"has_static_query_id","","",27,{"inputs":[],"output":{"name":"bool"}}],[0,"threads","oration::schema","",null,null],[3,"table","oration::schema::threads","The actual table struct",null,null],[0,"dsl","","Re-exports all of the columns of this table, as well as the table struct renamed to the module name. This is meant to be glob imported for functions which only deal with one table.",null,null],[0,"columns","","Contains all of the columns of this table",null,null],[3,"star","oration::schema::threads::columns","Represents `table_name.*`, which is sometimes needed for efficient count queries. It cannot be used in place of `all_columns`, and has a `SqlType` of `()` to prevent it being used that way",null,null],[3,"id","","",null,null],[3,"uri","","",null,null],[3,"title","","",null,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"walk_ast","","",28,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"walk_ast","","",29,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",29,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",29,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",29,null],[11,"add","","",29,null],[11,"sub","","",29,null],[11,"div","","",29,null],[11,"mul","","",29,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"uri"}}],[11,"walk_ast","","",30,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",30,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",30,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",30,null],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"title"}}],[11,"walk_ast","","",31,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"has_static_query_id","","",31,{"inputs":[],"output":{"name":"bool"}}],[11,"name","","",31,{"inputs":[],"output":{"name":"str"}}],[11,"eq_all","","",31,null],[6,"SqlType","oration::schema::threads","The SQL type of all of the columns on this table",null,null],[6,"BoxedQuery","","Helper type for representing a boxed query from this table",null,null],[17,"all_columns","","A tuple of all of the columns on this table",null,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"table"}}],[11,"star","","Represents `table_name.*`, which is sometimes necessary for efficient count queries. It cannot be used in place of `all_columns`",32,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"from_clause","","",32,null],[11,"default_selection","","",32,null],[11,"as_query","","",32,null],[11,"primary_key","","",32,null],[11,"all_columns","","",32,null],[11,"table","","",32,null],[11,"into_update_target","","",32,{"inputs":[{"name":"self"}],"output":{"name":"updatetarget"}}],[11,"join_target","","",32,null],[11,"join_target","","",32,null],[11,"join_target","","",32,null],[11,"join_target","","",32,null],[11,"has_static_query_id","","",32,{"inputs":[],"output":{"name":"bool"}}],[11,"join_target","oration::schema::comments","",23,null],[11,"join_target","oration::schema::threads","",32,null],[0,"static_files","oration","Serves up static files through Rocket.",null,null],[5,"rocket_route_fn_files","oration::static_files","",null,{"inputs":[{"name":"request"},{"name":"data"}],"output":{"name":"outcome"}}],[5,"files","","Call serves any requested static file from public.",null,{"inputs":[{"name":"pathbuf"}],"output":{"name":"option"}}],[7,"static_rocket_route_info_for_files","","Rocket code generated static route information structure.",null,null],[0,"errors","oration","Handles the error chain of the program.",null,null],[3,"Error","oration::errors","The Error type.",null,null],[12,"0","","The kind of the error.",33,null],[12,"1","","Contains the error chain and the backtrace.",33,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",34,null],[13,"SessionHash","","",34,null],[13,"NoSession","","",34,null],[13,"NoThread","","",34,null],[13,"DBRead","","",34,null],[13,"Rand","","",34,null],[13,"ConfigLoad","","",34,null],[13,"ConfigParse","","",34,null],[13,"Deserialize","","",34,null],[13,"NoHTTPHandle","","",34,null],[13,"__Nonexhaustive","","",34,null],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",33,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",33,null],[11,"with_chain","","",33,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"self"}}],[11,"kind","","",33,null],[11,"iter","","",33,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"chain_err","","",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"backtrace","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extract_backtrace","","",33,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",33,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",33,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"error"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",33,{"inputs":[{"name":"box"},{"name":"k"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",33,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",33,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"error"}}],[11,"description","","",33,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",33,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",33,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",33,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"deref","","",33,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",34,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",34,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",34,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",34,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[7,"static_rocket_route_info_for_index","oration","Rocket code generated static route information structure.",null,null],[7,"static_rocket_route_info_for_new_comment","","Rocket code generated static route information structure.",null,null],[7,"static_rocket_route_info_for_get_session","","Rocket code generated static route information structure.",null,null],[7,"static_rocket_route_info_for_get_comment_count","","Rocket code generated static route information structure.",null,null],[11,"from_form","","",0,{"inputs":[{"name":"formitems"},{"name":"bool"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_form","","",1,{"inputs":[{"name":"formitems"},{"name":"bool"}],"output":{"name":"result"}}]],"paths":[[3,"FormInput"],[3,"Post"],[3,"Config"],[3,"Conn"],[3,"Preference"],[3,"Thread"],[3,"NewThread"],[3,"Comment"],[3,"star"],[3,"id"],[3,"tid"],[3,"parent"],[3,"created"],[3,"modified"],[3,"mode"],[3,"remote_addr"],[3,"text"],[3,"author"],[3,"email"],[3,"website"],[3,"likes"],[3,"dislikes"],[3,"voters"],[3,"table"],[3,"star"],[3,"key"],[3,"value"],[3,"table"],[3,"star"],[3,"id"],[3,"uri"],[3,"title"],[3,"table"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"]]};
initSearch(searchIndex);
